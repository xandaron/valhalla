#version 450

layout (binding = 0, rgba8) uniform readonly image2D inImage;
layout (binding = 1, rgba8) uniform writeonly image2D outImage;

// x * y * z <= 1024; must be true
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

vec4 sampleQuad(ivec2 uv, int x0, int x1, int y0, int y1, int n) {
    vec3 colourSum = vec3(0.0, 0.0, 0.0);
    float lengthSum = 0.0;
    float lengthSum2 = 0.0;
    for (int x = x0; x < x1; x++) {
        for (int y = y0; y < y1; y++) {
            vec3 colour = imageLoad(inImage, uv + ivec2(x, y)).xyz;
            colourSum += colour;
            float l = length(colour);
            lengthSum += l;
            lengthSum2 += l * l;
        }
    }
    float mean = lengthSum / n;
    float std = ((lengthSum2 - 2 * lengthSum * mean) / n) + (mean * mean);
    return vec4(colourSum / n, std);
}

int quadSize = 8;
int quadArea = quadSize * quadSize;

void main() {
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    float bestStd;
    vec3 outColour;

    vec4 q0 = sampleQuad(uv, -quadSize, 0, -quadSize, 0, quadArea);
    outColour = q0.xyz;
    bestStd = q0.a;

    vec4 q1 = sampleQuad(uv, 0, quadSize, -quadSize, 0, quadArea);
    if (bestStd > q1.a) {
        outColour = q1.rgb;
    }

    vec4 q2 = sampleQuad(uv, -quadSize, 0, 0, quadSize, quadArea);
    if (bestStd > q2.a) {
        outColour = q2.rgb;
    }

    vec4 q3 = sampleQuad(uv, 0, quadSize, 0, quadSize, quadArea);
    if (bestStd > q3.a) {
        outColour = q3.rgb;
    }

    imageStore(outImage, uv, vec4(outColour, 1.0));
}