#version 450

layout(binding = 0, rgba8) uniform readonly image2D inImage;
layout(binding = 1, rgba8) uniform writeonly image2D outImage;

layout(binding = 2) uniform sampler2D sceneDepth;

layout(binding = 3) readonly uniform UniformBuffer {
	mat4 view;
	mat4 projection;
	mat4 viewProjection;
    uint lightCount;
} uniformBuffer;

struct Light {
    mat4 mvp;
    vec4 position;
    vec4 colourIntensity;
};

layout(binding = 4) readonly buffer LightBuffer {
    Light[] lights;
} lightBuffer;

// x * y * z <= 1024; must be true
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main() {
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    vec4 colour = imageLoad(inImage, ivec2(x, y));
    vec2 screenPosition = vec2(x, y) / imageSize(inImage);

    for (uint i = 0; i < uniformBuffer.lightCount; i++) {
        vec4 lightPosition = uniformBuffer.viewProjection * lightBuffer.lights[i].position;
        lightPosition /= lightPosition.w;
        if (texture(sceneDepth, screenPosition).r > lightPosition.z) {
            float distanceFromLight = length(lightPosition.xy - (2 * screenPosition - 1));
            colour += (1 - lightPosition.z) * lightBuffer.lights[i].colourIntensity / distanceFromLight;
        }
    }

    imageStore(outImage, ivec2(x, y), colour);
}